type Users {
  id: ID
  firstName: String
  lastName: String
  email: String
  password: String
  loginMethod: String
  username: String
  createdAt: String
  updatedAt: String
  softDelete: Boolean
  isSuperAdmin: Boolean
  coverImage: String
  profileImage: String
  spaces: [Spaces]
}

type Spaces {
  id: ID
  name: String
  description: String
  accessCode: String
  coverImage: String
  members: [Members]
  rooms: [Rooms]
  files: [Files]
  createdAt: String
  updatedAt: String
}

type Rooms {
  id: ID
  name: String
  description: String
  spaceOwner: Spaces
  tasks: [Tasks]
  coverImage: String
  createdAt: String
  updatedAt: String
}

type Files {
  id: ID
  name: String
  description: String
  type: String
  src: String
  asignedRoom: Rooms
  createdAt: String
  updatedAt: String
}

type Tasks {
  id: ID
  title: String
  description: String
  status: String
  deadline: String
  asignedTo: [Users]
  createdAt: String
  updatedAt: String
}

type Members {
  user: Users
  role: String
}

type Query {
  findAllUsers: [Users]
  findUserById(id: ID): Users
  findSpaceById(id: ID): Spaces
  findRoomById(id: ID): Rooms
  findTaskById(taskId: ID, roomId: ID): Tasks
}

type Mutation {
  createUser(
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    loginMethod: String!
    username: String!
    profileImage: String
    isSuperAdmin: Boolean
  ): Users

  deleteUser(id: ID!): Users

  editUser(
    firstName: String
    lastName: String
    email: String
    password: String
    username: String
    profileImage: String
    coverImage: String
    isSuperAdmin: Boolean
    softDelete: Boolean
  ): Users

  createSpace(
    userOwner: ID!
    name: String!
    description: String!
    accessCode: String!
    coverImage: String!
  ): Spaces

  deleteSpace(id: ID!): Spaces

  editSpace(
    name: String
    description: String
    accessCode: String
    coverImage: String
  ): Spaces

  createRoom(
    spaceOwnerId: ID!
    name: String!
    description: String!
    coverImage: String!
  ): Rooms

  deleteRoom(id: ID!): Rooms

  editRoom(name: String, description: String, coverImage: String): Rooms

  createTask(
    roomOwnerId: ID!
    title: String!
    description: String
    status: Int
    deadline: String
    assignedToIds: [ID]
  ): Tasks

  deleteTask(taskId: ID!, roomId: ID!): Tasks

  editTask(
    title: String
    description: String
    status: Int
    deadline: String
    assignedToIds: [ID]
  ): Tasks
}
